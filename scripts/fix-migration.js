const { execSync } = require('child_process');

async function fixFailedMigration() {
  try {
    console.log('üîß G√©n√©ration du client Prisma...');
    execSync('npx prisma generate', { stdio: 'inherit' });
    
    console.log('üîß Nettoyage des migrations √©chou√©es...');
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    
    // V√©rifier et supprimer la migration √©chou√©e
    const failedMigration = await prisma.$queryRaw`
      SELECT * FROM "_prisma_migrations" 
      WHERE migration_name = '20250115000001_add_testimonies_and_activity_logs' 
      AND finished_at IS NULL
    `;
    
    if (failedMigration && failedMigration.length > 0) {
      console.log('‚ö†Ô∏è  Migration √©chou√©e d√©tect√©e, suppression...');
      
      await prisma.$executeRaw`
        DELETE FROM "_prisma_migrations" 
        WHERE migration_name = '20250115000001_add_testimonies_and_activity_logs' 
        AND finished_at IS NULL
      `;
      
      console.log('‚úÖ Migration √©chou√©e supprim√©e');
    } else {
      console.log('‚úÖ Aucune migration √©chou√©e d√©tect√©e');
    }
    
    await prisma.$disconnect();
    
    console.log('üöÄ Application des migrations...');
    execSync('npx prisma migrate deploy', { stdio: 'inherit' });
    
    console.log('‚úÖ Migrations appliqu√©es avec succ√®s');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©solution de la migration:', error.message);
    // Ne pas faire √©chouer le d√©marrage du serveur
    console.log('‚ö†Ô∏è  D√©marrant le serveur malgr√© l\'erreur de migration...');
  }
}

fixFailedMigration().catch(console.error);

