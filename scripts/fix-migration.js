const { execSync } = require('child_process');

async function fixFailedMigration() {
  try {
    console.log('üîß G√©n√©ration du client Prisma...');
    execSync('npx prisma generate', { stdio: 'inherit', stdio: 'inherit' });
    
    console.log('üîß Connexion √† la base de donn√©es...');
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    
    try {
      // Supprimer toutes les migrations √©chou√©es
      console.log('üßπ Suppression des migrations √©chou√©es...');
      await prisma.$executeRaw`
        DELETE FROM "_prisma_migrations" 
        WHERE (started_at IS NOT NULL AND finished_at IS NULL)
      `;
      console.log('‚úÖ Migrations √©chou√©es supprim√©es');
    } catch (error) {
      console.log('‚ö†Ô∏è  Erreur lors du nettoyage (possible que tout soit d√©j√† propre):', error.message);
    }
    
    await prisma.$disconnect();
    
    // Marquer sp√©cifiquement la migration probl√©matique comme appliqu√©e
    try {
      console.log('üîß R√©solution de la migration testimonies...');
      execSync('npx prisma migrate resolve --applied 20250115000001_add_testimonies_and_activity_logs', { stdio: 'inherit' });
    } catch (error) {
      console.log('‚ö†Ô∏è  Impossible de marquer comme appliqu√©e (peut √™tre normale):', error.message);
    }
    
    console.log('üöÄ Application des nouvelles migrations...');
    execSync('npx prisma migrate deploy', { stdio: 'inherit' });
    
    console.log('‚úÖ Migrations appliqu√©es avec succ√®s');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©solution de la migration:', error.message);
    console.log('‚ö†Ô∏è  D√©marrant le serveur malgr√© l\'erreur de migration...');
  }
}

fixFailedMigration().catch(console.error);
