const { PrismaClient } = require('@prisma/client');
const logger = require('../utils/logger');

const prisma = new PrismaClient();

// R√©cup√©rer tous les √©v√©nements publics (pour la page publique)
const getPublicEvents = async (req, res) => {
  try {
    const { church_id } = req.query;

    if (!church_id) {
      return res.status(400).json({ 
        success: false, 
        message: 'ID de l\'√©glise requis' 
      });
    }

    const events = await prisma.calendarEvent.findMany({
      where: {
        church_id,
        is_public: true
      },
      include: {
        church: {
          select: {
            nom: true,
            ville: true
          }
        }
      },
      orderBy: {
        start_date: 'asc'
      }
    });

    logger.info('‚úÖ √âv√©nements publics r√©cup√©r√©s avec succ√®s');

    res.json({
      success: true,
      data: events
    });
  } catch (error) {
    logger.error('‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements publics:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des √©v√©nements'
    });
  }
};

// R√©cup√©rer tous les √©v√©nements (pour le dashboard admin)
const getAllEvents = async (req, res) => {
  try {
    const { church_id } = req.query;
    const user_id = req.user.id;

    if (!church_id) {
      return res.status(400).json({ 
        success: false, 
        message: 'ID de l\'√©glise requis' 
      });
    }

    // V√©rifier les permissions
    const user = await prisma.user.findUnique({
      where: { id: user_id },
      include: { eglise_locale: true }
    });

    if (!user) {
      return res.status(404).json({ message: 'Utilisateur non trouv√©' });
    }

    // Seuls les admins et super-admins peuvent voir tous les √©v√©nements
    if (!['ADMIN', 'SUPER_ADMIN'].includes(user.role)) {
      return res.status(403).json({ message: 'Acc√®s non autoris√©' });
    }

    const events = await prisma.calendarEvent.findMany({
      where: {
        church_id
      },
      include: {
        church: {
          select: {
            nom: true,
            ville: true
          }
        },
        created_by: {
          select: {
            pseudo: true,
            username: true
          }
        }
      },
      orderBy: {
        start_date: 'asc'
      }
    });

    logger.info('‚úÖ Tous les √©v√©nements r√©cup√©r√©s avec succ√®s');

    res.json({
      success: true,
      data: events
    });
  } catch (error) {
    logger.error('‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des √©v√©nements'
    });
  }
};

// R√©cup√©rer un √©v√©nement par ID
const getEventById = async (req, res) => {
  try {
    const { id } = req.params;

    const event = await prisma.calendarEvent.findUnique({
      where: { id },
      include: {
        church: {
          select: {
            nom: true,
            ville: true,
            adresse: true
          }
        },
        created_by: {
          select: {
            pseudo: true,
            username: true
          }
        }
      }
    });

    if (!event) {
      return res.status(404).json({
        success: false,
        message: '√âv√©nement non trouv√©'
      });
    }

    logger.info('‚úÖ √âv√©nement r√©cup√©r√© avec succ√®s');

    res.json({
      success: true,
      data: event
    });
  } catch (error) {
    logger.error('‚ùå Erreur lors de la r√©cup√©ration de l\'√©v√©nement:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration de l\'√©v√©nement'
    });
  }
};

// Cr√©er un nouvel √©v√©nement
const createEvent = async (req, res) => {
  try {
    logger.info('üîç Cr√©ation √©v√©nement - Donn√©es re√ßues:', { body: req.body });
    
    const { 
      title, 
      description, 
      start_date, 
      end_date, 
      location, 
      event_type, 
      is_public, 
      church_id 
    } = req.body;
    const created_by_id = req.user.id;

    // V√©rifier les permissions
    const user = await prisma.user.findUnique({
      where: { id: created_by_id },
      include: { eglise_locale: true }
    });

    if (!user) {
      return res.status(404).json({ message: 'Utilisateur non trouv√©' });
    }

    // Seuls les admins et super-admins peuvent cr√©er des √©v√©nements
    if (!['ADMIN', 'SUPER_ADMIN'].includes(user.role)) {
      return res.status(403).json({ message: 'Acc√®s non autoris√©' });
    }

    // V√©rifier que l'√©glise existe
    const church = await prisma.church.findUnique({
      where: { id: church_id }
    });

    if (!church) {
      return res.status(404).json({ message: '√âglise non trouv√©e' });
    }

    // Cr√©er l'√©v√©nement
    const event = await prisma.calendarEvent.create({
      data: {
        title,
        description,
        start_date: new Date(start_date),
        end_date: end_date ? new Date(end_date) : null,
        location,
        event_type: event_type || 'GENERAL',
        is_public: is_public !== undefined ? is_public : true,
        church_id,
        created_by_id
      },
      include: {
        church: {
          select: {
            nom: true,
            ville: true
          }
        },
        created_by: {
          select: {
            pseudo: true,
            username: true
          }
        }
      }
    });

    logger.info('‚úÖ √âv√©nement cr√©√© avec succ√®s:', { eventId: event.id });

    res.status(201).json({
      success: true,
      data: event,
      message: '√âv√©nement cr√©√© avec succ√®s'
    });
  } catch (error) {
    logger.error('‚ùå Erreur lors de la cr√©ation de l\'√©v√©nement:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la cr√©ation de l\'√©v√©nement'
    });
  }
};

// Mettre √† jour un √©v√©nement
const updateEvent = async (req, res) => {
  try {
    const { id } = req.params;
    const { 
      title, 
      description, 
      start_date, 
      end_date, 
      location, 
      event_type, 
      is_public 
    } = req.body;
    const user_id = req.user.id;

    // V√©rifier que l'√©v√©nement existe
    const existingEvent = await prisma.calendarEvent.findUnique({
      where: { id },
      include: { created_by: true }
    });

    if (!existingEvent) {
      return res.status(404).json({ message: '√âv√©nement non trouv√©' });
    }

    // V√©rifier les permissions
    const user = await prisma.user.findUnique({
      where: { id: user_id }
    });

    if (!user) {
      return res.status(404).json({ message: 'Utilisateur non trouv√©' });
    }

    // Seuls les admins, super-admins ou le cr√©ateur peuvent modifier
    if (!['ADMIN', 'SUPER_ADMIN'].includes(user.role) && existingEvent.created_by_id !== user_id) {
      return res.status(403).json({ message: 'Non autoris√© √† modifier cet √©v√©nement' });
    }

    // Mettre √† jour l'√©v√©nement
    const updatedEvent = await prisma.calendarEvent.update({
      where: { id },
      data: {
        title,
        description,
        start_date: start_date ? new Date(start_date) : undefined,
        end_date: end_date ? new Date(end_date) : undefined,
        location,
        event_type,
        is_public
      },
      include: {
        church: {
          select: {
            nom: true,
            ville: true
          }
        },
        created_by: {
          select: {
            pseudo: true,
            username: true
          }
        }
      }
    });

    logger.info('‚úÖ √âv√©nement mis √† jour avec succ√®s:', { eventId: id });

    res.json({
      success: true,
      data: updatedEvent,
      message: '√âv√©nement mis √† jour avec succ√®s'
    });
  } catch (error) {
    logger.error('‚ùå Erreur lors de la mise √† jour de l\'√©v√©nement:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la mise √† jour de l\'√©v√©nement'
    });
  }
};

// Supprimer un √©v√©nement
const deleteEvent = async (req, res) => {
  try {
    const { id } = req.params;
    const user_id = req.user.id;

    // V√©rifier que l'√©v√©nement existe
    const existingEvent = await prisma.calendarEvent.findUnique({
      where: { id },
      include: { created_by: true }
    });

    if (!existingEvent) {
      return res.status(404).json({ message: '√âv√©nement non trouv√©' });
    }

    // V√©rifier les permissions
    const user = await prisma.user.findUnique({
      where: { id: user_id }
    });

    if (!user) {
      return res.status(404).json({ message: 'Utilisateur non trouv√©' });
    }

    // Seuls les admins, super-admins ou le cr√©ateur peuvent supprimer
    if (!['ADMIN', 'SUPER_ADMIN'].includes(user.role) && existingEvent.created_by_id !== user_id) {
      return res.status(403).json({ message: 'Non autoris√© √† supprimer cet √©v√©nement' });
    }

    // Supprimer l'√©v√©nement
    await prisma.calendarEvent.delete({
      where: { id }
    });

    logger.info('‚úÖ √âv√©nement supprim√© avec succ√®s:', { eventId: id });

    res.json({
      success: true,
      message: '√âv√©nement supprim√© avec succ√®s'
    });
  } catch (error) {
    logger.error('‚ùå Erreur lors de la suppression de l\'√©v√©nement:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la suppression de l\'√©v√©nement'
    });
  }
};

// R√©cup√©rer les √©v√©nements par mois (pour le calendrier)
const getEventsByMonth = async (req, res) => {
  try {
    const { church_id, year, month } = req.query;

    if (!church_id || !year || !month) {
      return res.status(400).json({ 
        success: false, 
        message: 'ID de l\'√©glise, ann√©e et mois requis' 
      });
    }

    // Calculer le d√©but et la fin du mois
    const startDate = new Date(year, month - 1, 1);
    const endDate = new Date(year, month, 0, 23, 59, 59);

    const events = await prisma.calendarEvent.findMany({
      where: {
        church_id,
        is_public: true,
        start_date: {
          gte: startDate,
          lte: endDate
        }
      },
      include: {
        church: {
          select: {
            nom: true,
            ville: true
          }
        }
      },
      orderBy: {
        start_date: 'asc'
      }
    });

    logger.info('‚úÖ √âv√©nements du mois r√©cup√©r√©s avec succ√®s');

    res.json({
      success: true,
      data: events
    });
  } catch (error) {
    logger.error('‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements du mois:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des √©v√©nements du mois'
    });
  }
};

module.exports = {
  getPublicEvents,
  getAllEvents,
  getEventById,
  createEvent,
  updateEvent,
  deleteEvent,
  getEventsByMonth
};
